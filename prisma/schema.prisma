generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id String @id @db.Text

  /// /highlight opt-in/opt-out
  optedOut   Boolean   @default(false) @map("opted_out")
  optedOutAt DateTime? @map("opted_out_at")

  /// Used to say "only send me highlights after I've been away from the channel for x seconds"
  ///
  /// `null` means always send messages
  ///
  /// /highlight grace-period set/clear/show
  gracePeriod Int? @map("grace_period")

  /// /highlight adult-channel-highlights enable/disable
  adultChannelHighlights Boolean @default(false) @map("adult_channel_highlights")

  /// Support globally ignoring users
  ///
  /// /globally-ignored-users add/remove/list/clear [user_id]
  globallyIgnoredUsers GlobalIgnoredUser[]

  /// All members that point to this user
  members      Member[]
  /// All user activities for this user
  userActivity UserActivity[]

  /// Represents the last time the user was unable to be DM'd.
  /// This property is used to give people who add words and then block the bot a cooldown on messages
  /// to prevent abuse.
  ///
  /// Users can check this via `/highlight direct-message-cooldown`, and can reset it by pressing the button attached to the message
  directMessageFailedAttempts    Int       @default(0) @map("direct_message_failed_attempts")
  directMessageCooldownExpiresAt DateTime? @map("direct_message_cooldown_expires_at")

  @@map("users")
}

model GlobalIgnoredUser {
  userId        String @map("user_id") @db.Text
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  ignoredUserId String @map("ignored_user_id") @db.Text

  @@id([userId, ignoredUserId])
  @@index([userId])
  @@map("global_ignored_users")
}

model Guild {
  guildId                       String                  @id @map("guild_id") @db.Text
  /// Keep default in sync with src/listeners/highlightRelated/parseMessage.ts
  notificationStyle             GuildNotificationStyle  @default(WithContextAndAuthor) @map("notification_style")
  // Make this customizable per server, incentivize paid for more than 3
  channelWithBotParsingsAllowed Int                     @default(3) @map("channel_with_bot_parsings_allowed")
  /// All channels that have bot parsing enabled for this guild
  channelsWithBotParsing        ChannelWithBotParsing[]
  /// All user activities for this guild
  userActivities                UserActivity[]
  /// All members that point to this guild
  members                       Member[]

  @@map("guilds")
}

/// Some people have requested that highlight parses bot messages too :shrug:
/// There can be legit use cases I suppose, so for now this is added as an option
model ChannelWithBotParsing {
  channelId String   @id @map("channel_id") @db.Text
  guildId   String   @map("guild_id") @db.Text
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  userId    String   @map("user_id") @db.Text
  addedAt   DateTime @default(now()) @map("added_at")

  @@map("channels_with_bot_parsing")
}

/// Privacy levels in DMs. All will still get a message link to the original message, but this will
/// hopefully prevent certain abuse vectors by leaving it at the guild's choice how the embed should look
enum GuildNotificationStyle {
  /// User#0000/@User highlighted you in #channel (+ optional message history is possible with who wrote the messages)
  WithContextAndAuthor        @map("WITH_CONTEXT_AND_AUTHOR")
  /// A user highlighted you in #channel (+ optional message history but no author data)
  WithContextButNoAuthor      @map("WITH_CONTEXT_BUT_NO_AUTHOR")
  /// User#0000/@User highlighted you in #channel (without message history)
  WithoutContextButWithAuthor @map("WITHOUT_CONTEXT_BUT_WITH_AUTHOR")
  /// A user highlighted you in #channel (without message history and author data)
  WithoutContextOrAuthor      @map("WITHOUT_CONTEXT_OR_AUTHOR")
}

model Member {
  guildId String @map("guild_id") @db.Text
  guild   Guild  @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  userId  String @map("user_id") @db.Text
  user    User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  /// Patterns that will trigger a highlight
  regularExpressions String[]              @map("regular_expressions") @db.Text
  /// Ignored users that will not trigger a highlight
  ///
  /// /server-ignore-list add/remove/list/clear [user_id|channel_id]
  ignoredUsers       GuildIgnoredUser[]
  /// Ignored channels that will not trigger a highlight
  ///
  /// /server-ignore-list add/remove/list/clear [user_id|channel_id]
  ignoredChannels    GuildIgnoredChannel[]

  @@id([guildId, userId])
  @@index([guildId])
  @@map("members")
}

// Used to power the grace period (but only for users who opted into having a grace period)
model UserActivity {
  userId       String   @map("user_id") @db.Text
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId    String   @map("channel_id") @db.Text
  guildId      String   @map("guild_id") @db.Text
  guild        Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  /// The last time the user was active
  lastActiveAt DateTime @map("last_active_at") @db.Timestamp()

  @@id([userId, channelId])
  @@map("user_activities")
}

model GuildIgnoredChannel {
  ignoredChannelId String @map("ignored_channel_id") @db.Text
  userId           String @map("user_id") @db.Text
  guildId          String @map("guild_id") @db.Text

  member Member @relation(fields: [guildId, userId], references: [guildId, userId], onDelete: Cascade)

  @@id([guildId, userId, ignoredChannelId])
  @@index([userId, guildId])
  @@index([guildId])
  @@map("guild_ignored_channels")
}

model GuildIgnoredUser {
  ignoredUserId String @map("ignored_user_id") @db.Text
  userId        String @map("user_id") @db.Text
  guildId       String @map("guild_id") @db.Text

  member Member @relation(fields: [guildId, userId], references: [guildId, userId], onDelete: Cascade)

  @@id([guildId, userId, ignoredUserId])
  @@index([userId, guildId])
  @@index([guildId])
  @@map("guild_ignored_users")
}
